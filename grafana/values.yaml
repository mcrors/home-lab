global:
  storageClass: ""

rbac:
  create: true
  ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
  # useExistingRole: name-of-some-role
  # useExistingClusterRole: name-of-some-clusterRole
  namespaced: true
  extraRoleRules: []
  # - apiGroups: []
  #   resources: []
  #   verbs: []
  extraClusterRoleRules: []
  # - apiGroups: []
  #   resources: []
  #   verbs: []
serviceAccount:
  create: true
  name: grafana-admin

replicas: 1

## See `kubectl explain deployment.spec.strategy` for more
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
deploymentStrategy:
  type: Recreate

readinessProbe:
  httpGet:
    path: /api/health
    port: 3000

livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

image:
  registry: docker.io
  repository: grafana/grafana
  tag: "12.2.0-17027759091"
  pullPolicy: IfNotPresent

securityContext:
  runAsNonRoot: true
  runAsUser: 472
  runAsGroup: 472
  fsGroup: 472

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

# Enable creating the grafana configmap
createConfigmap: true

downloadDashboardsImage:
  # -- The Docker registry
  registry: docker.io
  repository: curlimages/curl
  tag: 8.9.1
  sha: ""
  pullPolicy: IfNotPresent

downloadDashboards:
  env: {}
  envFromSecret: ""
  resources: {}
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    seccompProfile:
      type: RuntimeDefault
  envValueFrom: {}

podPortName: grafana
gossipPortName: gossip

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  enabled: true
  type: ClusterIP
  port: 3000
  targetPort: 3000
  portName: grafana-service

ingress:
  enabled: true
  ingressClassName: traefik
  annotations: {
    traefik.ingress.kubernetes.io/router.tls: "true"
  }
  path: /

  # pathType is only for k8s >= 1.1=
  pathType: Prefix

  hosts:
    - grafana.houli.eu

  tls:
  - hosts:
    - grafana.houli.eu

resources:
  requests:
    cpu: 250m
    memory: 512Mi
  limits:
    cpu: "1"        # or omit to avoid CPU throttling
    memory: 1Gi

## Affinity for pod assignment (evaluated as template)
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: iscsi_initiator
              operator: In
              values:
                - "true"
            - key: memory
              operator: In
              values:
                - "4.0GB"

## Enable persistence using Persistent Volume Claims
persistence:
  type: pvc
  enabled: true
  storageClassName: '""'
  volumeName: "pv-grafana"
  selectorLabels:
    storage.owner: grafana
  lookupVolumeName: true
  accessModes:
    - ReadWriteOnce
  size: 1Gi
  extraPvcLabels: {}
  annotations: {}
  finalizers:
    - kubernetes.io/pvc-protection

initChownData:
  ## If false, data ownership will not be reset at startup
  ## This allows the grafana-server to be run with an arbitrary user
  ##
  enabled: true

  ## initChownData container image
  ##
  image:
    # -- The Docker registry
    registry: docker.io
    repository: library/busybox
    tag: "1.31.1"
    sha: ""
    pullPolicy: IfNotPresent

  ## initChownData resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
   limits:
     cpu: 100m
     memory: 128Mi
   requests:
     cpu: 100m
     memory: 128Mi
  securityContext:
    readOnlyRootFilesystem: false
    runAsNonRoot: false
    runAsUser: 0
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      add:
        - CHOWN
      drop:
        - ALL

# Administrator credentials when not using an existing secret (see below)
adminUser: admin
adminPassword: ""

# Use an existing secret for the admin user.
admin:
  existingSecret: grafana-admin
  userKey: admin-user
  passwordKey: admin-password

## Pass the plugins you want installed as a list.
##
plugins: []
  # - digrich-bubblechart-panel
  # - grafana-clock-panel
  ## You can also use other plugin download URL, as long as they are valid zip files,
  ## and specify the name of the plugin after the semicolon. Like this:
  # - https://grafana.com/api/plugins/marcusolsson-json-datasource/versions/1.3.2/download;marcusolsson-json-datasource

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
##
datasources:
 datasources.yaml:
   apiVersion: 1
   datasources:
   - name: Prometheus
     type: prometheus
     url: https://prometheus.houli.eu
     access: proxy
     isDefault: true
   deleteDatasources:
   - name: Prometheus

# dashboardProviders:
  # dashboardproviders.yaml:
    # apiVersion: 1
    # providers:
      # - name: default
        # orgId: 1
        # folder: "Infra"
        # type: file
        # disableDeletion: false
        # editable: true
        # options:
          # path: /var/lib/grafana/dashboards/infra

# Download dashboards from grafana.com on start
# dashboards:
  # infra:
    # node-exporter-full:
      # gnetId: 1860
      # datasource: Prometheus
    # blackbox-exporter:
      # gnetId: 7587
      # datasource: Prometheus
    # node-exporter-resources:
      # gnetId: 13702
      # datasource: Prometheus

## Configure how curl fetches remote dashboards. The beginning dash is required.
## NOTE: This sets the default short flags for all dashboards, but these
##       defaults can be overridden individually for each dashboard by setting
##       curlOptions. See the example dashboards section below.
##
## -s  - silent mode
## -k  - allow insecure (eg: non-TLS) connections
## -f  - fail fast
## See the curl documentation for additional options
##
defaultCurlOptions: "-skf"

## Reference to external ConfigMap per provider. Use provider name as key and ConfigMap name as value.
## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
## ConfigMap data example:
##
## data:
##   example-dashboard.json: |
##     RAW_JSON
##
dashboardsConfigMaps: {}
#  default: ""

## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
  server:
    domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ tpl (.Values.ingress.hosts | first) . }}{{ else }}''{{ end }}"
